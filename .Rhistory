## Contraste de dos colas
# Dada dos muestras aleatorias de tama?os n1 = 56 y n2 = 63
set.seed(174376)
m1 <- rexp(n = 56, rate = 4.1); 1/4.1 # media real de la poblaci?n
tail(as.data.frame(m1))
m2 <- rexp(n = 63, rate = 3.4); 1/3.4 # media real de la poblaci?n
tail(as.data.frame(m2))
1/4.1-1/3.4 # diferencia de medias real
# El valor observado del estad?stico de prueba en este caso est? dado por:
z0 <- (mean(m1)-mean(m2)-0)/sqrt(var(m1)/56 + var(m2)/63)
z0
# Supongamos que estamos interesados en encontrar la regi?n de rechazo
# (de dos colas) con un nivel de significancia alpha = 0.05,
# debemos encontrar el valor z_{0.025} que satisface P(Z > z_{0.025}) = 0.025.
(z.025 <- qnorm(p = 0.025, lower.tail = FALSE))
# Como
(z0 < -z.025) | (z0 > z.025)
# fallamos en rechazar la hip?tesis nula.
# p-value: El p-value lo podemos calcular como
(pvalue <- 2*pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal est?ndar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(min(x), x[x<=-z0], -z0), c(0, y[x<=-z0], 0), col="purple")
axis(side = 1, at = -z0, font = 2, padj = 1, lwd = 2)
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="purple")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
# Dada dos muestras aleatorias de tama?os n1 = 23 y n2 = 20
set.seed(1776)
m1 <- rnorm(n = 23, mean = 175, sd = 3)
tail(as.data.frame(m1))
m2 <- rnorm(n = 20, mean = 160, sd = 3)
tail(as.data.frame(m2))
175-160 # diferencia de medias real
# El valor observado del estad?stico de prueba en este caso est? dado por:
t0 <- (mean(m1)-mean(m2)-0)/(sqrt((22*var(m1)+19*var(m2))/(23+20-2))*sqrt(1/23+1/20))
t0
(t.025 <- qt(p = 0.025, df= 41, lower.tail = FALSE))
# Como
(t0 < -t.025) | (t0 > t.025)
# p-value: El p-value lo podemos calcular como
(pvalue <- 2*pt(t0, df = 41, lower.tail = FALSE))
# Tambi?n podemos usar la funci?n t.test para llevar a cabo el
# procedimiento de contraste de hip?tesis
t.test(x = m1, y = m2,
alternative = "two.sided",
mu = 0, paired = FALSE, var.equal = TRUE)
## Contraste de dos colas
# Dada dos muestras aleatorias de tama?os n1 = 56 y n2 = 63
set.seed(174376)
m1 <- rexp(n = 56, rate = 4.1); 1/4.1 # media real de la poblaci?n
tail(as.data.frame(m1))
m2 <- rexp(n = 63, rate = 3.4); 1/3.4 # media real de la poblaci?n
tail(as.data.frame(m2))
1/4.1-1/3.4 # diferencia de medias real
# El valor observado del estad?stico de prueba en este caso est? dado por:
z0 <- (mean(m1)-mean(m2)-0)/sqrt(var(m1)/56 + var(m2)/63)
z0
# Supongamos que estamos interesados en encontrar la regi?n de rechazo
# (de dos colas) con un nivel de significancia alpha = 0.05,
# debemos encontrar el valor z_{0.025} que satisface P(Z > z_{0.025}) = 0.025.
(z.025 <- qnorm(p = 0.025, lower.tail = FALSE))
# Como
(z0 < -z.025) | (z0 > z.025)
# fallamos en rechazar la hip?tesis nula.
# p-value: El p-value lo podemos calcular como
(pvalue <- 2*pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal est?ndar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(min(x), x[x<=-z0], -z0), c(0, y[x<=-z0], 0), col="purple")
axis(side = 1, at = -z0, font = 2, padj = 1, lwd = 2)
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="purple")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
# Dada dos muestras aleatorias de tama?os n1 = 23 y n2 = 20
set.seed(1776)
m1 <- rnorm(n = 23, mean = 175, sd = 3)
tail(as.data.frame(m1))
m2 <- rnorm(n = 20, mean = 160, sd = 3)
tail(as.data.frame(m2))
175-160 # diferencia de medias real
# El valor observado del estad?stico de prueba en este caso est? dado por:
t0 <- (mean(m1)-mean(m2)-0)/(sqrt((22*var(m1)+19*var(m2))/(23+20-2))*sqrt(1/23+1/20))
t0
(t.025 <- qt(p = 0.025, df= 41, lower.tail = FALSE))
# Como
(t0 < -t.025) | (t0 > t.025)
# p-value: El p-value lo podemos calcular como
(pvalue <- 2*pt(t0, df = 41, lower.tail = FALSE))
# Tambi?n podemos usar la funci?n t.test para llevar a cabo el
# procedimiento de contraste de hip?tesis
t.test(x = m1, y = m2,
alternative = "two.sided",
mu = 0, paired = FALSE, var.equal = TRUE)
print("R Instalado ...")
setwd('/HDD/Code/R/DataMining')
setwd('/HDD/Code/R/DataMining')
n <- 1000
n.sample <- rnorm(n, mean=0, sd=1)
percent <- sum((n.sample >= -1) & (n.sample <= 1)) / n
print(paste(
percent * 100,
"% falls between -1 and 1"
))
# Plot
plot(n.sample)
abline(h=1)
abline(h=-1)
abline(h=1, col="green")
abline(h=[1, -1], col="green")
abline(h=1, col="green")
abline(h=-1, col="green")
n <- 1000
n.sample <- rnorm(n, mean=0, sd=1)
# Quantity of numbers that falls between -1 and 1
percent <- sum((n.sample >= -1) & (n.sample <= 1)) / n
# Result
print(paste(
percent * 100,
"% falls between -1 and 1"
))
# Plot
plot(n.sample)
abline(h=1, col="green")
abline(h=-1, col="green")
n <- 10000
n.sample <- rnorm(n, mean=0, sd=1)
# Quantity of numbers that falls between -1 and 1
percent <- sum((n.sample >= -1) & (n.sample <= 1)) / n
# Result
print(paste(
percent * 100,
"% falls between -1 and 1"
))
# Plot
plot(n.sample)
abline(h=1, col="green")
abline(h=-1, col="green")
pnorm
# getwd
getwd()
# setwd: Sets the working direcory
setwd("/HDD/Code/R/DataMining")
# max: Returns the max value of a series of numbers
max(1, 2, -3)
max(c(10, -10, 11, 9))
min(c(10, -10, 11, 9))
# min: Returns the minimum value of a series of numbers
min(1, 2, -3)
vect = c(10, -10, 11, 9)
min(vect)
# sd: Returns the standard deviation of a series of numbers
st(vect)
# sd: Returns the standard deviation of a series of numbers
sd(vect)
range
range(vect)
# mean: Returns the statistical mean of a series of numbers
mean(vect)
median(vect)
vect = c(10, -10, 11, 9, 14, 33, 9)
# 1) getwd: Gets the current working directory
getwd()
# 2) setwd: Sets the working direcory
setwd("/HDD/Code/R/DataMining")
# 3) max: Returns the maximum value of a series of numbers
max(1, 2, -3)
max(vect)
# 4) min: Returns the minimum value of a series of numbers
min(1, 2, -3)
min(vect)
# 5) sd: Returns the standard deviation of a series of numbers
sd(vect)
# 6) mean: Returns the statistical mean of a series of numbers
mean(vect)
# 7) median: Returns the statistical median of a series of numbers
median(vect)
ls
ls()
dir()
# 3) dir: Shows all the files in the current working directory
dir()
quantile
num.sample = rnorm(100, 7, 3)
quantile
quantile(1)
quantile(num.sample)
?quantile
# 9) quantile: Produces sample quantiles corresponding to the given probabilities
quantile(num.sample)
quantile(num.sample, probs = .99)
quantile(num.sample, probs = .45)
quantile(num.sample, probs = c(.1, .95))
IQR(num.sample)
IQR(num.sample)
?IQR
# 10) IQR: Returns the interquartile range
IQR(num.sample)
matrix
# 11) matrix:
?matrix
# 11) matrix: creates a matrix from the given set of values
mat
# 11) matrix: creates a matrix from the given set of values
matrix(c('1 1', '3 6', '2 2', '5 5'), ncol = 2)
# 11) matrix: creates a matrix from the given set of values
matrix(c('1 1', '3 6', '2 4', '5 25'), ncol = 2)
# 11) matrix: creates a matrix from the given set of values
matrix(c(1, 1, 3, 6, 2, 4, 5, 25))
# 11) matrix: creates a matrix from the given set of values
matrix(c(1, 1, 3, 6, 2, 4, 5, 25), nrows=3)
# 11) matrix: creates a matrix from the given set of values
matrix(c(1, 1, 3, 6, 2, 4, 5, 25), nrow=3)
# 11) matrix: creates a matrix from the given set of values
matrix(c(1, 1, 3, 6, 2, 4, 5, 25), nrow=2)
# 11) matrix: creates a matrix from the given set of values
matrix(c(1, 1, 3, 6, 2, 4, 5, 25), nrow=3)
# 11) matrix: creates a matrix from the given set of values
matrix(c(1, 1, 3, 6, 2, 4, 5, 25), nrow=4)
c(c(1,2))
unlist(c(c(1,2)))
# 12) lappy:
lappy
# 12) lappy:
?lappy
# 12) lappy:
?lapply
lapply(vec)
lapply(vec, function(n) {n + 1})
vect
lapply(vect, function(n) {n + 1})
lapply(vect, function(n) {n % 2})
lapply(vect, function(n) {mod(n, 2)})
mod
unlist(lapply(vect, function(n) {n + 1}))
# 13) unlist
?unlist
# 13) unlist: Given a list structure x, unlist simplifies it to produce a vector which contains all the atomic components which occur in x.
a.mess = lapply(vect, function(n) {n + 1})
a.mess
a.mess <- unlist(a.mess)
a.mess
vect
num.sample
head(num.sample)
head(num.sample. 9)
head(num.sample, 9)
head(num.sample)
?head
# 14) head: Returns the first of a vector, matrix, table, data frame or function
head(num.sample))
# 14) head: Returns the first of a vector, matrix, table, data frame or function
head(num.sample)
head(num.sample, 3)
# 14) head: Returns the last part of a vector, matrix, table, data frame or function
tail(num.sample)
tail(num.sample, 3)
?dnorm
dnorm(10)
dnorm(1)
dnorm(2)
# 16) hist: Shows a histogram
hist(num.sample)
?hist
?par
corr
cor
?cor
var(num.sample)
# 17) var: Returns the variance
var(num.sample)
cor(num.sample)
cor(num.sample, num.sample + 1)
cor(num.sample, num.sample + rnorm(n))
num.sample + rnorm(n)
(num.sample + rnorm(n))
cor(num.sample, num.sample + rnorm(n))
num.sample + rnorm(n)
a = num.sample + rnorm(n)
dim(a)
a
unlist(a)
num.sample
a
rnorm(n)
n
num.sample
cor(num.sample, num.sample + rnorm(100))
# 19) cov: Returns the covariance
cov(num.sample, num.sample + rnorm(100))
table
table(num.sample)
vect
table(vect)
vect = c(10, -10, 11, 9, 14, 33, 9)
vect = c(10, -10, 11, 9, 14, 33, 9)
table(vect)
?table
table(vect)
vect = c(10, -10, 11, 9, 14, 33, 9)
num.sample = rnorm(100, 7, 3)
# 1) getwd: Gets the current working directory
getwd()
# 2) setwd: Sets the working direcory
setwd("/HDD/Code/R/DataMining")
# 3) dir: Shows all the files in the current working directory
dir()
# 4) max: Returns the maximum value of a series of numbers
max(1, 2, -3)
max(vect)
min(1, 2, -3)
min(vect)
# 19) cov: Returns the covariance
cov(num.sample, num.sample + rnorm(100))
